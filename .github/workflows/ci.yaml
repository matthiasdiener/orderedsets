name: CI

on:
  pull_request:
  push:
    branches: main
  schedule:
  - cron:  '5 0 * * *'

# Cancel in progress CI runs when a new run targeting the same PR or branch/tag is triggered.
# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
    flake8:
        name: Flake8
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        -
          uses: actions/setup-python@v4
          with:
            python-version: '3.8'
        - name: Flake8 test
          run: |
            python -m pip install flake8 pep8-naming flake8-quotes flake8-bugbear flake8-pyproject flake8-isort
            python -m flake8 --show-source --statistics "$(basename $GITHUB_REPOSITORY)" test && echo "Flake8 found no errors."

    mypy:
        name: Mypy
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -
            uses: actions/setup-python@v4
            with:
                python-version: '3.x'
        -   name: Run mypy
            run: |
                python -m pip install mypy frozendict
                mypy --strict orderedsets

    # pylint:
    #     name: Pylint
    #     runs-on: ubuntu-latest
    #     steps:
    #     - uses: actions/checkout@v3
    #     -
    #       uses: actions/setup-python@v4
    #       with:
    #         python-version: '3.x'
    #     - name: Install
    #       run: |
    #         . .ci-support/install.sh

    #     - name: Run Pylint
    #       run: |
    #         MINIFORGE_INSTALL_DIR=.miniforge3
    #         . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
    #         ./run-pylint.sh

    # pydocstyle:
    #     runs-on: ubuntu-latest
    #     steps:
    #     - uses: actions/checkout@v3
    #     -
    #       uses: actions/setup-python@v4
    #       with:
    #         python-version: '3.x'
    #     - name: Run Pydocstyle
    #       run: |
    #         python3 -m venv myenv
    #         source myenv/bin/activate
    #         python -m pip install wheel
    #         python -m pip install pydocstyle
    #         python -m pydocstyle "$(basename $GITHUB_REPOSITORY)" && echo "pydocstyle found no errors."

    pytest:
        name: Pytest
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        - name: Run Pytest
          run: |
            python -m pip install -U pytest pytest-cov pip setuptools frozendict
            pip install -e .
            cd test
            python -m pytest --cov=orderedsets --durations=0 --tb=native -rxsw .

    # examples:
    #     name: Examples
    #     runs-on: ${{ matrix.os }}
    #     strategy:
    #       matrix:
    #         os: [ubuntu-latest, porter]

    #     steps:
    #     - uses: actions/checkout@v3
    #     - name: Install
    #       run: |
    #         . .ci-support/install.sh

    #     - name: Test lazy accuracy
    #       run: |
    #         MINIFORGE_INSTALL_DIR=.miniforge3
    #         . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
    #         mamba install vtk  # needed for the accuracy comparison
    #         export XDG_CACHE_HOME=/tmp
    #         [[ $(hostname) == "porter" ]] && export PYOPENCL_TEST="port:nv" && unset XDG_CACHE_HOME
    #         # && export POCL_DEBUG=cuda
    #         scripts/run-integrated-tests.sh --lazy-accuracy
    #     - name: Run examples
    #       run: |
    #         MINIFORGE_INSTALL_DIR=.miniforge3
    #         . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
    #         export XDG_CACHE_HOME=/tmp
    #         [[ $(hostname) == "porter" ]] && export PYOPENCL_TEST="port:nv" && unset XDG_CACHE_HOME
    #         # && export POCL_DEBUG=cuda
    #         scripts/run-integrated-tests.sh --examples

    # doc:
    #     name: Documentation
    #     runs-on: ubuntu-latest

    #     steps:
    #     - uses: actions/checkout@v3
    #     - name: Install
    #       run: |
    #         . .ci-support/install.sh

    #     - name: Build docs
    #       run: |
    #         set -x
    #         MINIFORGE_INSTALL_DIR=.miniforge3
    #         . "$MINIFORGE_INSTALL_DIR/bin/activate" testing

    #         sudo apt-get update
    #         sudo apt-get install texlive-latex-extra latexmk
    #         mamba install sphinx graphviz 'docutils>=0.16'

    #         # Work around "Not enough memory to run on this device." errors in CI:
    #         mamba uninstall pocl

    #         pip install sphinx-math-dollar sphinx-copybutton furo
    #         cd doc
    #         make html SPHINXOPTS="-W --keep-going -n"
    #         make latexpdf SPHINXOPTS="-W --keep-going -n"

